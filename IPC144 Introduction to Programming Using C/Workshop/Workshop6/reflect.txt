///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #6
Full Name  : TSZ WA WONG
Student ID#: 152181228

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. 

The three types of iteration constructs, do-while loops, while-loops, and for-loops, exist because they allow computers to repeat actions either for a specified number of times or until certain conditions are met. These constructs are designed to suit human logical thinking and are more understandable for humans. For instance, when prompting users for input, the do-while loop is preferable because it allows for repeated prompts until a valid input is received. When working with arrays, for-loops are generally preferred over while-loops and do-while loops because they are optimized for iterating over collections. They combine the initialization, condition, and iteration expressions in a single line, which makes the code easier to read, less error-prone, and faster than other loop constructs. Additionally, for-loops offer greater flexibility and control over the processing of the array, including iterating over sub-ranges, skipping elements, and iterating in reverse order.

2.

In my program, I had two semantic errors which were not violation of the syntax rules, but rather a problem with the meaning of the code. One of them was that I could not get the integral value of forecastMonth. To debug my program, I added printf() statements in the intermediate part to display the value of (int)(sumOfCost/monthlyIncome/12 - forecastYear)*12. After that, I found out I missed the parentheses, so that the program did the casting before the result multiply by 12. This caused that I always got a 0 as the result, while I was supposed to get an integral value of forecastMonth. So I replace it to (int)((sumOfCost/monthlyIncome/12 - forecastYear)*12) to fix the issue. 

The second one was that the complier reported that I used an undeclared identifier which was an array named 'table'. And after I used an interactive debugging tools provided by Visual Studio IDE and a walkthrough table, I found that it was because I declared the array in a do-while loop which was in a different scope than where it was used. To fix this issue, I declare the 'table' array outside the do-while loop which is for determining the number of items users want to forecast, so that the 'table' array is initialized in global scope and can be used anywhere in the program.

Additionally, I also rely on compiler error messages to correct syntactic issues in my code, such as the absence of semicolons in for-loops and incorrect format specifiers in printf statements. It is crucial to use the correct format specifier in printf statements, as it should match the type of data being printed and the number of format specifiers should match the number of arguments. However, mistakes can happen, and it is easy to use the wrong format specifier or omit some arguments in printf statements.
3. 

Step 1: Open the output file and locate line 6, which contains the error.
Step 2: According to the diff.txt, the unmatched character is located in column 33, which 	should be 5, instead 0. Locate that unmatched character first.
Step 3: Open the w6p2_master_output.txt and locate line 6 to see what is expected output 	for the while line 6 and compare it with the output file to see if there are 		additional errors.
Step 4: Locate the corresponding line in my program which print out "Enter your monthly NET 	income: $567.89".
Step 5: Analyze why this error occurs. As it is found that it is a typographical error, 	I can just resubmit my work and enter the value carefully which is 0, instead of 	567.89, when the program prompts me for the NET monthly income, so that the output 	in line 6 matches the expected output.
Step 6: Save the corrected output file.


