/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Milestone 3
Full Name  :TSZ WA WONG
Student ID#:152181228
Email      :twwong9@myseneca.ca
Section    :NFF

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

1. 

To manage the appointment data properly, I create the following functions to ensure that appointments are well-organized, do not overlap, and are accurate.

void sortAppointments(struct Appointment* appoints, int max);
The purpose of this function is to arrange the appointment data including the patient number in chronological order by sorting the year, month, day, hour, and minute values in the struct Appointment array. To accomplish this task, I utilized the selection sort algorithm, by iterating through the array, comparing each element to the next in minutes unit, and swapping them if necessary to ensure that the appointment data is sorted in ascending order. By arranging the data in this way, it is much easier to manage and maintain the appointments, as the staff can quickly access and view upcoming appointments.

int timeSlotAvailable(struct Appointment* appoint, struct Date inputDate, struct Time inputTime, int maxAppointments);
The purpose of this function is to prevent double bookings and overlapping appointments as overlapping appointments can cause significant issues, such as delays and missed appointments, which can be frustrating for both the staff and patients. To prevent this, the function iterates through the 'appoint' array and compares the input value ('inputDate', 'inputTime') with existing appointments to determine whether the time slot specified by the user is already occupied by another appointment. If the time slot is available, the function will return 1, allowing the staff to schedule the appointment with confidence. Otherwise, the function will return 0.

int validateAppointment(struct Appointment *appoint, struct Date inputDate, int patientNumber, int* appointIndex, int maxAppointments);
This function check if the given appointment information is valid, by iterating through the 'appoint' array to search for an existing appointment that matches the given 'patientNumber' and 'inputDate'. If a match is found, the function will return 1 and store the index of the matching appointment in 'appointIndex'. Otherwise, the function will return 0.


2.

I believe the main issue with using the scanf() function is that it terminates reading an input once it comes across a whitespace character such as a tab, space, or newline. This can leave any remaining characters in the input buffer, causing the next input function to read the leftover character instead of prompting the user for new input.

Another reason to avoid using scanf() is that it can be difficult to use it to read specific input from complex strings that include whitespaces and special characters. Although it can be used with the %[^\n] conversion specifier to read strings with whitespace in between, the field delimiter in the %[] conversion specifier must be defined carefully and accurately to ensure that the input is read as intended. For example, consider the input string '(1,Tom Holland |2012-2015|$100000)'. It would be challenging to use scanf() to only read the value '2012' from this string, and some characters may be left in the buffer, leading to input buffer issues as mentioned before.

Therefore, we need to purposely minimize the use of scanf function in the module.

3.

I have placed the three functions I created in question one in the utility section. This is because they perform specific tasks that can be reused throughout the program, making it more modular and maintainable. 

For instance, if there is another unsorted struct Appointment array imported from a new text file, the 'sortAppointments' function can be called to sort it in chronological order, making it a utility function. 

Regarding the 'timeSlotAvailable' function, it is placed in the utility section because it is frequently used. This function is typically called whenever the staff intends to add a new appointment to the Veterinarian Clinic System or reschedule an existing appointment to another time slot. 

Similarly, the 'validateAppointment' function is placed in the utility section due to its frequent use. This function is often called whenever the staff wants to cancel an existing appointment or reschedule an existing appointment to another time slot.