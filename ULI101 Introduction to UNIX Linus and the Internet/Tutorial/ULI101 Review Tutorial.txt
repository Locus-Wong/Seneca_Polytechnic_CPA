~uli101/review-tutorials


part 1: Lab Navigation
no need to do anything


part 2: Introduction
Q1. What command output displays your username
A1. whoami

Q2. What command output displays your present (current) location in the directory tree
A2. pwd

Q3. What command shows the contents of your directory?
A3. ls

Q4. The output from this command line shows the contents of:

  - previous month
  - this month
  - and the next month

HINT: Read the man page for a command displaying calendar information.
A4. cal -3


part 3: VIm and vimtutor
Q1. What command starts vim tutor?
A1. vimtutor

Q2.Vim uses two modes when editing files: Normal and ___________

  HINT: see lines 42 and 435 of vimtutor for the two modes.
A2. insert

Q3. To go from Insert to Normal mode, what key combination do you use?

  Enter control keys in uppercase, for example:
    - use ESC for escape
    - and use "+" to show a key combination

  for example CTRL+d or CTRL+d! (Avoid spaces between keys).
A3. ESC

Q4. What key combination quits vimtutor without saving changes? Assume insert
mode and there are no changes to save.

  Enter control keys in uppercase, for example:
    - use ESC for escape
    - and use "+" to show a key combination

  HINT: End with ! only when necessary.

  for example CTRL+d or CTRL+d! (Avoid spaces between keys).
A4. ESC+:q

Q5. What key combination quits vimtutor without saving changes despite having
unsaved edits? Assume insert mode.

  Enter control keys in uppercase, for example:
    - use ESC for escape
    - and use "+" to show a key combination

  HINT: End with ! only when necessary.

  for example CTRL+d or CTRL+d! (Avoid spaces between keys).
A5. ESC+:q!

Q6. In Normal mode, Vim uses:

- j to move down
- k to move up
- h to move left
- _ to move right
A6. l

Q7. In Normal mode, Vim uses:

- __ to delete the line the cursor is on and put it into Vim a register
A7. dd

Q8. In Normal mode, Vim uses:

- _ to paste what is in the register before the cursor
A8. P

Q9. You are in Insert mode and wish to save changes and quit. What key
combination do you use:
A9. ESC+:wq

Q10. You are in Insert mode and wish to look up something in VIm's help.
What key combination do you use:
A10. ESC+:help


part 4: File Permissions
Q1. The output below occurs after creating file foo and listing its permissions

 $ touch foo
 $ ls -l foo
 -rw-r--r-- 1 ubuntu users 813 Sep 13 20:30 foo

 $ chmod ... foo

What 3-digit octal value of ... would give foo permissions listed above?
A1. 644

Q2. What 3-digit octal value of ... gives foo permissions listed below?

$ chmod ... foo
$ ls -l foo
  ---------- 1 ubuntu users 813 Sep 13 20:30 foo
A2. 000

Q3. $ ls -l foo
  -rwxr-x--x 1 ubuntu users 813 Sep 13 20:30 foo

  What command line using octal method sets permissions of foo as shown?

  HINT Start your answer with:

    chmod followed by 3-digit octal number followed by filename
A3. chmod 751 foo

Q4. $ ls -l foo
  --wx-w---x 1 ubuntu users 813 Sep 13 20:30 foo

  What command line using octal method sets permissions of foo as shown

  HINT Start your answer with:

    chmod followed by 3-digit octal number followed by filename
A4. chmod 321 foo

A5. Permissions of foo are shown, what octal ... value makes foo a script?

$ ls -l foo
  ---------- 1 ubuntu users 813 Sep 13 20:30 foo
$ chmod ... foo

   HINT: Write a 3-digit octal value that makes foo a script for all
         without making script insecure. Owner gets all permissions.
A6. 755


part 5: Directory Permissions
Q1. Follow the example. Then fill in the blanks for chmod in the command below

 $ mkdir bar
 $ ls -ld bar
 drwxr-xr-x 2 ubuntu users 6 Nov 10 08:53 bar

 $ chmod 000 bar
 $ ls -ld bar
 d--------- 2 ubuntu users 6 Nov 10 08:53 bar

 NOTE: set means =, add means +, remove means -
 Fill blanks using chmod's symbolic mode to give bar the permissions next

 $ chmod ___ bar
 $ ls -ld bar
 drwxr-xr-x 2 ubuntu users 6 Nov 10 08:53 bar
A1. u+rwx,g+rx,o+rx

Q2. $ chmod ___ bar
$ ls -ld bar
d--------- 2 ubuntu users 6 Nov 10 08:53 bar


Using chmod in symbolic mode, what ___ gives bar those permissions?
NOTE: set means =, add means +, remove means -
A2. a-rwx

Q3. Without knowing the previous permissions of bar, what command line uses
chmod in symbolic mode to set permissions of bar to be as shown below.

$ ls -ld bar
drwxr-x--x 2 ubuntu users 6 Nov 10 08:53 bar

  HINT Start your answer with:

    chmod followed by symbolic settings followed by directory

NOTE: set means =, add means +, remove means -
A3. chmod u=rwx,g=rx,o=x bar

Q4. Initial permissions of bar are:

$ ls -ld bar
drwx---r-x 2 ubuntu users 6 Nov 10 08:53 bar


What command line in symbolic mode changes (adds/removes) permissions
of bar to be as shown below

$ ls -ld bar
d-wxr-x--x 2 ubuntu users 6 Nov 10 08:53 bar

  HINT Start your answer with:

    chmod followed by symbolic settings followed by directory

NOTE: set means =, add means +, remove means -
A4. chmod u-r,g+rx,o-r bar

Q5. Suggest a symbolic mode for ___ so bar has passthrough permissions

$ ls -ld bar
d--------- 2 ubuntu users 6 Nov 10 08:53 bar
$ chmod ___ bar

HINT: Passthrough permissions provide maximum access to owner, fewer
 to group, and fewest to others without shutting off access entirely.

 NOTE: set means =, add means +, remove means -
A5. u+rwx,g+rx,o+x


part 6: Regular Expressions Using grep
Q1. Fill the three blanks to get output on matrix exactly as shown. grep was
run on matrix to get the word bash from file passwd in directory etc.


$ grep __ "____" ___________

root:x:0:0:root@mtrx-node05pd.dcm:/root:/bin/bash
postgres:x:26:26:PostgreSQL Server:/var/lib/pgsql:/bin/bash
admin:x:210:100:matrix mwho admin:/home0/admin:/bin/bash
r.haq:x:501:1000:Rizwan Haq:/home0/r.haq:/bin/bash
m.ziaei:x:502:1001:Mehrdad Ziaei:/home0/m.ziaei:/bin/bash
a.salagean:x:503:1002:Alex Salagean:/home0/a.salagean:/bin/bash
o.gudnova:x:504:1003:Olga Gudnova:/home0/o.gudnova:/bin/bash
pwmanager.sa:x:505:100::/home0/pwmanager.sa:/bin/bash


Single spaced, three part, answer. Use option(s) with hypen(-),
double quotes(""), and /path/to/file or path/to/file as needed.

HINT: Use the word option of grep.
A1. -w "bash" /etc/passwd

Q2. Fill the two blanks after grep to get output on matrix exactly as shown

$ grep ___ "____" ~mark.fernandes/pub/notes/data/cars

plym    fury    77      73      2500
chevy   nova    79      60      3000
volvo   gl      78      102     9850
Chevy   nova    80      50      3500
fiat    600     65      115     450
honda   accord  81      30      6000
toyota  tercel  82      180     750
chevy   impala  65      85      1550


Single spaced, two part, answer. Use option(s) with hypen(-) and double
quotes("") as needed.
A2. -v "ford"

Q3. Fill in the blank after egrep to get output on matrix exactly as shown

$ egrep "_____________" ~mark.fernandes/pub/notes/data/cars

plym    fury    77      73      2500
chevy   nova    79      60      3000
volvo   gl      78      102     9850
Chevy   nova    80      50      3500
fiat    600     65      115     450
honda   accord  81      30      6000
toyota  tercel  82      180     750
chevy   impala  65      85      1550


Answer does not use egrep options. Use as few characters as needed to
get output above. While frustrating, keep trying, many answers exist.

HINT: Use answer(s) from previous question(s) for clues on how to solve
      this question. Except this answer uses regex, not egrep options.
A3. ^[^f]|^f[^o]

Q4. Fill in the blank after grep to get output of cars made in the 80's on
matrix to be exactly as shown

$ grep "_______________" ~mark.fernandes/pub/notes/data/cars

ford    ltd     83      15      10500
Chevy   nova    80      50      3500
honda   accord  81      30      6000
ford    thundbd 84      10      17000
toyota  tercel  82      180     750
ford    bronco  83      25      9525


NO quotes. Use as few characters as you can to get the output above.
This can be frustrating but keep trying, many answers already exist.
A4. [a-z] *8 or .*8[0-4]

Q5. Fill the two blanks after grep to get output on matrix exactly as shown

$ grep __ "grep" ~mark.fernandes/pub/notes/* ___________

/home/mark.fernandes/pub/notes/07-grep-options.txt
/home/mark.fernandes/pub/notes/08-misc-cli-commands.txt
/home/mark.fernandes/pub/notes/90-tricky_globbing.txt
/home/mark.fernandes/pub/notes/93-introducing-grep.txt
/home/mark.fernandes/pub/notes/94-introducing-grep-2.txt
/home/mark.fernandes/pub/notes/95-sed-and-awk.txt


Single spaced, two part, answer. Include option(s) with hypen(-) and
input/output redirection as needed.
HINT: Use output redirection to get output as above.
A5. -l 2>/dev/null


part 7: sed and awk
Q1. Using sed display lines 3, 4, 5 from file passwd in directory etc on matrix


 $ sed __ '____' ___________

 daemon:x:2:2:daemon:/sbin:/sbin/nologin
 adm:x:3:4:adm:/var/adm:/sbin/nologin
 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

 Single spaced, three part, answer. Use single quotes('') only around the
 sed command, no quotes around sed options or /path/to/file.
A1. -n '3,5 p' /etc/passwd

Q2. Using sed fill in the blanks so the output is exactly as shown

 $ echo 'this not THIS yettthiss' | sed '_____________'
 that not THIS yettthats

 One part answer. Use single quotes('').
A2. 's/is/at/g'

Q3. Fill in the blanks after awk to get output on matrix exactly as shown

$ awk '_________________' ~mark.fernandes/pub/notes/data/cars

ford    ltd     83      15      10500
Chevy   nova    80      50      3500
honda   accord  81      30      6000
ford    thundbd 84      10      17000
toyota  tercel  82      180     750
ford    bronco  83      25      9525


One part answer. Use single quotes('') and spaces around operators. awk
prints lines matched; use "print" when a custom output format is needed.
This answer does not use awk's regex match operators '~' and '!~'.
A3. $3 >= 80 or $3 > 79

Q4. Fill in two blanks after awk to get output on matrix exactly as shown

$ awk ___ ____________  ~mark.fernandes/pub/notes/data/inventory

300
1216
96
49
1937
200
130
16

One part answer. Use single quotes(''), option(s) with hypen(s) and spaces
around operators. awk prints lines matched; use "print" when custom output
format is needed.
A4. -F',' '{print $2}'

Q5. Fill in three blanks naming tools that make use of regular expressions.
Put all three answers on one line and separate them by spaces.

For quick searches use ____, for simple editing of data use ___, and for
columnwise access to data or fancy printing in report writing use ___.
A5. grep sed awk


part 8: Bash Scripting
Q1. $ cat hello.bash
#!/bin/bash
echo "Hello Bash!"

$ ls -l hello.bash
---------- 1 ubuntu users 10 Dec 10 00:00 hello.bash

Convert text file hello.bash to a script using chmod and octal permissions
to make hello.bash runnable and editable by user; runnable by group; and
allow others to have view access only.

$ chmod ___ hello.bash
A1. 754

Q2. $ cat hello.bash
#!/bin/bash
echo "__"

Fill in the blank above so script works as shown below

$ ./hello.bash Hello
Hello

$ ./hello.bash "Hello Bash"
"Hello Bash"

$ ./hello.bash Hello Bash
Hello
A2. $1

Q3. $ cat hello.bash
#!/bin/bash

if [ __ "__" ]; then
  >&2 echo "ERROR! Usage: script requires at least one argument"
  exit 1
fi

echo "__"

Fill in the THREE blanks above so script works as shown below

$ ./hello.bash
ERROR! Usage: script requires at least one argument

$ ./hello.bash Hello
Hello

$ ./hello.bash "Hello Bash"
"Hello Bash"

$ ./hello.bash Hello Bash
Hello

Separate your 3 answers by spaces and put them one line
A3. -z $1 $1

Q4. $ cat hello.bash
#!/bin/bash

if [ "__" = "" ]; then
  >&2 echo "ERROR! Usage: script requires at least one argument"
  exit 1
fi

echo "__"

Fill in the TWO blanks above so script works as shown below

$ ./hello.bash
ERROR! Usage: script requires at least one argument

$ ./hello.bash Hello
Hello

$ ./hello.bash "Hello Bash"
"Hello Bash"

$ ./hello.bash Hello Bash
Hello

Separate your 2 answers by spaces and put them one line
A4. $1 $1

Q5. HINTS: 1. DON'T test this script on matrix. Use a VM like Ubuntu instead.
       2. Use your MySeneca instead of jbond007 when testing your script.
       3. Every blank '_' shown below is ANY character from [a-z0-9"$:-].
       4. Use quotes around parameters, meaning use "$1" instead of $1.
       5. Fill FIVE MISSING PARTS to make this work, hints in prev steps.

$ cat hello.bash
# TWO blanks need to be filled in here
if [ __ ____ ]; then
  >&2 echo "ERROR! Usage: script requires at least one argument"
  exit 1
fi

# THREE blanks need to be filled in here
if scp ____ jbond007@matrix.senecacollege.ca_uli101; then
  echo "SUCCESS! __ was copied to your uli101 directory on matrix"
else
 >&2 echo "ERROR! Cannot connect to matrix. Is GlobalConnect VPN running?"
 >&2 echo "    and directory uli101 must exist on matrix for scp to copy."
  exit 1
fi

Fill in the FIVE blanks above so script works as shown below
$ ./hello.bash
ERROR! Usage: script requires at least one argument

$ ./hello.bash hello.bash
ERROR! Cannot connect to matrix. Is GlobalConnect VPN running?
    and directory uli101 must exist on matrix for scp to copy.

$ ./hello.bash hello.bash
SUCCESS! hello.bash was copied to your uli101 directory on matrix
A5. -z "$1" "$1" : $1

